/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __LATENCYCATCH_BPF_SKEL_H__
#define __LATENCYCATCH_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct latencycatch_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *enter_time;
		struct bpf_map *bss;
	} maps;
	struct {
		struct bpf_program *enter;
		struct bpf_program *exit1;
	} progs;
	struct {
		struct bpf_link *enter;
		struct bpf_link *exit1;
	} links;
	struct latencycatch_bpf__bss {
		long long int time_sum;
		long int count;
	} *bss;

#ifdef __cplusplus
	static inline struct latencycatch_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct latencycatch_bpf *open_and_load();
	static inline int load(struct latencycatch_bpf *skel);
	static inline int attach(struct latencycatch_bpf *skel);
	static inline void detach(struct latencycatch_bpf *skel);
	static inline void destroy(struct latencycatch_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
latencycatch_bpf__destroy(struct latencycatch_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
latencycatch_bpf__create_skeleton(struct latencycatch_bpf *obj);

static inline struct latencycatch_bpf *
latencycatch_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct latencycatch_bpf *obj;
	int err;

	obj = (struct latencycatch_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = latencycatch_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	latencycatch_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct latencycatch_bpf *
latencycatch_bpf__open(void)
{
	return latencycatch_bpf__open_opts(NULL);
}

static inline int
latencycatch_bpf__load(struct latencycatch_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct latencycatch_bpf *
latencycatch_bpf__open_and_load(void)
{
	struct latencycatch_bpf *obj;
	int err;

	obj = latencycatch_bpf__open();
	if (!obj)
		return NULL;
	err = latencycatch_bpf__load(obj);
	if (err) {
		latencycatch_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
latencycatch_bpf__attach(struct latencycatch_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
latencycatch_bpf__detach(struct latencycatch_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *latencycatch_bpf__elf_bytes(size_t *sz);

static inline int
latencycatch_bpf__create_skeleton(struct latencycatch_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "latencycatch_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "enter_time";
	s->maps[0].map = &obj->maps.enter_time;

	s->maps[1].name = "latencyc.bss";
	s->maps[1].map = &obj->maps.bss;
	s->maps[1].mmaped = (void **)&obj->bss;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "enter";
	s->progs[0].prog = &obj->progs.enter;
	s->progs[0].link = &obj->links.enter;

	s->progs[1].name = "exit1";
	s->progs[1].prog = &obj->progs.exit1;
	s->progs[1].link = &obj->links.exit1;

	s->data = (void *)latencycatch_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *latencycatch_bpf__elf_bytes(size_t *sz)
{
	*sz = 8440;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x38\x1a\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1b\0\
\x01\0\x85\0\0\0\x05\0\0\0\x7b\x0a\xf8\xff\0\0\0\0\x85\0\0\0\x0e\0\0\0\x63\x0a\
\xf4\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf4\xff\xff\xff\xbf\xa3\0\0\0\
\0\0\0\x07\x03\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\
\0\0\0\0\0\0\x85\0\0\0\x02\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x85\0\0\0\
\x0e\0\0\0\x63\x0a\xfc\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\
\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\xbf\x06\0\0\0\0\0\
\0\x15\x06\x0f\0\0\0\0\0\x85\0\0\0\x05\0\0\0\x79\x61\0\0\0\0\0\0\x1f\x10\0\0\0\
\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x01\0\0\0\0\0\0\xb7\x01\0\0\x01\
\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\0\0\0\xbf\xa2\0\0\0\0\
\0\0\x07\x02\0\0\xfc\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\
\x03\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x01\0\x50\x20\0\0\0\0\0\0\0\x70\0\0\0\0\
\0\0\0\x02\0\x7a\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\
\xff\xff\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x02\0\x7a\x04\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x02\0\x7a\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xc0\0\0\
\0\0\0\0\0\x01\0\x56\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\
\xff\xff\0\0\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\x01\0\x50\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\x11\x01\x25\x0e\x13\x05\x03\x0e\x10\x17\x1b\x0e\
\x11\x01\x55\x17\0\0\x02\x34\0\x03\x0e\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\
\0\0\x03\x24\0\x03\x0e\x3e\x0b\x0b\x0b\0\0\x04\x13\x01\x0b\x0b\x3a\x0b\x3b\x0b\
\0\0\x05\x0d\0\x03\x0e\x49\x13\x3a\x0b\x3b\x0b\x38\x0b\0\0\x06\x0f\0\x49\x13\0\
\0\x07\x01\x01\x49\x13\0\0\x08\x21\0\x49\x13\x37\x0b\0\0\x09\x24\0\x03\x0e\x0b\
\x0b\x3e\x0b\0\0\x0a\x21\0\x49\x13\x37\x05\0\0\x0b\x34\0\x03\x0e\x49\x13\x3a\
\x0b\x3b\x0b\0\0\x0c\x15\0\x49\x13\x27\x19\0\0\x0d\x16\0\x49\x13\x03\x0e\x3a\
\x0b\x3b\x0b\0\0\x0e\x34\0\x03\x0e\x49\x13\x3a\x0b\x3b\x05\0\0\x0f\x15\x01\x49\
\x13\x27\x19\0\0\x10\x05\0\x49\x13\0\0\x11\x0f\0\0\0\x12\x26\0\0\0\x13\x04\x01\
\x49\x13\x0b\x0b\x3a\x0b\x3b\x05\0\0\x14\x28\0\x03\x0e\x1c\x0f\0\0\x15\x2e\x01\
\x03\x0e\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x20\x0b\0\0\x16\x05\0\x03\x0e\x3a\x0b\
\x3b\x0b\x49\x13\0\0\x17\x34\0\x03\x0e\x3a\x0b\x3b\x0b\x49\x13\0\0\x18\x2e\x01\
\x11\x01\x12\x06\x40\x18\x97\x42\x19\x03\x0e\x3a\x0b\x3b\x0b\x27\x19\x49\x13\
\x3f\x19\0\0\x19\x1d\x01\x31\x13\x55\x17\x58\x0b\x59\x0b\x57\x0b\0\0\x1a\x34\0\
\x02\x17\x31\x13\0\0\x1b\x0b\x01\0\0\x1c\x0b\x01\x55\x17\0\0\0\xb6\x02\0\0\x04\
\0\0\0\0\0\x08\x01\0\0\0\0\x0c\0\x15\0\0\0\0\0\0\0\x55\0\0\0\0\0\0\0\0\0\0\0\
\x90\0\0\0\x02\x7f\0\0\0\x3f\0\0\0\x01\x06\x09\x03\0\0\0\0\0\0\0\0\x03\x88\0\0\
\0\x05\x08\x02\x96\0\0\0\x5b\0\0\0\x01\x07\x09\x03\0\0\0\0\0\0\0\0\x03\x9c\0\0\
\0\x05\x08\x02\xa5\0\0\0\x77\0\0\0\x01\x0e\x09\x03\0\0\0\0\0\0\0\0\x04\x20\x01\
\x09\x05\xb0\0\0\0\xac\0\0\0\x01\x0a\0\x05\xcd\0\0\0\xcb\0\0\0\x01\x0b\x08\x05\
\xd9\0\0\0\xdd\0\0\0\x01\x0c\x10\x05\xdd\0\0\0\xe2\0\0\0\x01\x0d\x18\0\x06\xb1\
\0\0\0\x07\xbd\0\0\0\x08\xc4\0\0\0\x01\0\x03\xb5\0\0\0\x05\x04\x09\xb9\0\0\0\
\x08\x07\x06\xd0\0\0\0\x07\xbd\0\0\0\x0a\xc4\0\0\0\0\x28\0\x06\xbd\0\0\0\x06\
\x3f\0\0\0\x0b\xe3\0\0\0\xf2\0\0\0\x03\x6d\x06\xf7\0\0\0\x0c\xfc\0\0\0\x0d\x07\
\x01\0\0\x0b\x01\0\0\x02\x16\x03\xf4\0\0\0\x07\x08\x0e\x11\x01\0\0\xf2\0\0\0\
\x03\x6b\x01\x0b\x2a\x01\0\0\x25\x01\0\0\x03\x49\x06\x2a\x01\0\0\x0f\x5b\0\0\0\
\x10\x44\x01\0\0\x10\x45\x01\0\0\x10\x45\x01\0\0\x10\xfc\0\0\0\0\x11\x06\x4a\
\x01\0\0\x12\x0b\x3e\x01\0\0\x56\x01\0\0\x03\x33\x06\x5b\x01\0\0\x0f\x44\x01\0\
\0\x10\x44\x01\0\0\x10\x45\x01\0\0\0\x0b\x52\x01\0\0\x76\x01\0\0\x03\x53\x06\
\x7b\x01\0\0\x0f\x5b\0\0\0\x10\x44\x01\0\0\x10\x45\x01\0\0\0\x13\xad\x01\0\0\
\x04\x02\xad\xab\x14\x73\x01\0\0\0\x14\x7b\x01\0\0\x01\x14\x87\x01\0\0\x02\x14\
\x91\x01\0\0\x04\0\x03\x66\x01\0\0\x07\x04\x15\x9c\x01\0\0\x01\x11\xbd\0\0\0\
\x01\x16\xa6\x01\0\0\x01\x11\xe2\x01\0\0\x17\xaa\x01\0\0\x01\x12\x3f\0\0\0\x17\
\xac\x01\0\0\x01\x13\xbd\0\0\0\0\x06\x07\x01\0\0\x18\0\0\0\0\0\0\0\0\x70\0\0\0\
\x01\x5a\xbf\x01\0\0\x01\x11\xbd\0\0\0\x16\xa6\x01\0\0\x01\x11\xe2\x01\0\0\x19\
\xb4\x01\0\0\0\0\0\0\x01\x11\x05\x1a\0\0\0\0\xcb\x01\0\0\x1a\x47\0\0\0\xd6\x01\
\0\0\0\0\x15\xb0\x01\0\0\x01\x19\xbd\0\0\0\x01\x16\xa6\x01\0\0\x01\x19\xe2\x01\
\0\0\x17\xac\x01\0\0\x01\x1a\xbd\0\0\0\x17\xaa\x01\0\0\x01\x1b\xe2\0\0\0\x1b\
\x17\xba\x01\0\0\x01\x1d\x3f\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\xd0\0\0\0\x01\x5a\
\xc5\x01\0\0\x01\x19\xbd\0\0\0\x16\xa6\x01\0\0\x01\x19\xe2\x01\0\0\x19\x2b\x02\
\0\0\x30\0\0\0\x01\x19\x05\x1a\x7b\0\0\0\x42\x02\0\0\x1a\xaf\0\0\0\x4d\x02\0\0\
\x1c\x60\0\0\0\x1a\xe2\0\0\0\x59\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\0\0\0\0\0\
\0\0\x40\0\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x18\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x48\0\0\0\0\0\0\0\xa0\0\0\0\0\0\0\0\xa8\0\0\0\0\0\0\0\xc0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x63\x6c\x61\
\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\x33\x2e\x30\x2e\x31\0\x2f\x68\
\x6f\x6d\x65\x2f\x68\x72\x70\x63\x63\x73\x2f\x77\x6f\x72\x6b\x73\x70\x61\x63\
\x65\x2f\x43\x72\x61\x73\x68\x43\x72\x61\x77\x6c\x65\x72\x2f\x63\x6f\x72\x65\
\x64\x75\x6d\x70\x2f\x6c\x61\x74\x65\x6e\x63\x79\x63\x61\x74\x63\x68\x2e\x62\
\x70\x66\x2e\x63\0\x2f\x68\x6f\x6d\x65\x2f\x68\x72\x70\x63\x63\x73\x2f\x77\x6f\
\x72\x6b\x73\x70\x61\x63\x65\x2f\x43\x72\x61\x73\x68\x43\x72\x61\x77\x6c\x65\
\x72\x2f\x62\x75\x69\x6c\x64\0\x74\x69\x6d\x65\x5f\x73\x75\x6d\0\x6c\x6f\x6e\
\x67\x20\x6c\x6f\x6e\x67\x20\x69\x6e\x74\0\x63\x6f\x75\x6e\x74\0\x6c\x6f\x6e\
\x67\x20\x69\x6e\x74\0\x65\x6e\x74\x65\x72\x5f\x74\x69\x6d\x65\0\x74\x79\x70\
\x65\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\
\x59\x50\x45\x5f\x5f\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\
\x79\0\x76\x61\x6c\x75\x65\0\x62\x70\x66\x5f\x6b\x74\x69\x6d\x65\x5f\x67\x65\
\x74\x5f\x6e\x73\0\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\x20\x75\x6e\x73\x69\x67\
\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x75\x36\x34\0\x62\x70\x66\x5f\x67\x65\
\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\0\x62\
\x70\x66\x5f\x6d\x61\x70\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\0\x62\
\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\0\x62\
\x70\x66\x5f\x6d\x61\x70\x5f\x64\x65\x6c\x65\x74\x65\x5f\x65\x6c\x65\x6d\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x42\x50\x46\x5f\x41\x4e\x59\0\
\x42\x50\x46\x5f\x4e\x4f\x45\x58\x49\x53\x54\0\x42\x50\x46\x5f\x45\x58\x49\x53\
\x54\0\x42\x50\x46\x5f\x46\x5f\x4c\x4f\x43\x4b\0\x5f\x5f\x5f\x5f\x65\x6e\x74\
\x65\x72\0\x63\x74\x78\0\x74\0\x70\x69\x64\0\x5f\x5f\x5f\x5f\x65\x78\x69\x74\
\x31\0\x74\x69\x6d\x65\0\x65\x6e\x74\x65\x72\0\x65\x78\x69\x74\x31\0\x9f\xeb\
\x01\0\x18\0\0\0\0\0\0\0\xa4\x01\0\0\xa4\x01\0\0\x99\x02\0\0\0\0\0\0\0\0\0\x02\
\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\
\x02\0\0\0\x04\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\
\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x28\0\0\0\
\0\0\0\0\0\0\x02\x02\0\0\0\0\0\0\0\0\0\0\x02\x09\0\0\0\x19\0\0\0\0\0\0\x01\x08\
\0\0\0\x40\0\0\x01\0\0\0\0\x04\0\0\x04\x20\0\0\0\x27\0\0\0\x01\0\0\0\0\0\0\0\
\x2c\0\0\0\x05\0\0\0\x40\0\0\0\x38\0\0\0\x07\0\0\0\x80\0\0\0\x3c\0\0\0\x08\0\0\
\0\xc0\0\0\0\x42\0\0\0\0\0\0\x0e\x0a\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0d\0\0\
\0\x4d\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x64\0\
\0\0\x0c\0\0\0\x68\0\0\0\x01\0\0\x0c\x0e\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\
\x64\0\0\0\x0c\0\0\0\x5a\x01\0\0\x01\0\0\x0c\x10\0\0\0\x76\x02\0\0\0\0\0\x0e\
\x09\0\0\0\x01\0\0\0\x7f\x02\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\x88\x02\0\0\0\
\0\0\x0e\x13\0\0\0\x01\0\0\0\x8e\x02\0\0\x02\0\0\x0f\0\0\0\0\x12\0\0\0\0\0\0\0\
\x08\0\0\0\x14\0\0\0\0\0\0\0\x08\0\0\0\x93\x02\0\0\x01\0\0\x0f\0\0\0\0\x0b\0\0\
\0\0\0\0\0\x20\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\
\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\x20\
\x69\x6e\x74\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\
\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x65\x6e\x74\x65\x72\x5f\x74\x69\x6d\x65\0\
\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\x20\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\
\x69\x6e\x74\0\x63\x74\x78\0\x65\x6e\x74\x65\x72\0\x66\x65\x6e\x74\x72\x79\x2f\
\x64\x6f\x5f\x63\x6f\x72\x65\x64\x75\x6d\x70\0\x2f\x68\x6f\x6d\x65\x2f\x68\x72\
\x70\x63\x63\x73\x2f\x77\x6f\x72\x6b\x73\x70\x61\x63\x65\x2f\x43\x72\x61\x73\
\x68\x43\x72\x61\x77\x6c\x65\x72\x2f\x63\x6f\x72\x65\x64\x75\x6d\x70\x2f\x6c\
\x61\x74\x65\x6e\x63\x79\x63\x61\x74\x63\x68\x2e\x62\x70\x66\x2e\x63\0\x20\x20\
\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\x20\x74\x20\x3d\x20\x62\x70\x66\x5f\x6b\
\x74\x69\x6d\x65\x5f\x67\x65\x74\x5f\x6e\x73\x28\x29\x3b\0\x20\x20\x69\x6e\x74\
\x20\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\
\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x3b\0\x20\x20\x62\x70\
\x66\x5f\x6d\x61\x70\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\
\x65\x6e\x74\x65\x72\x5f\x74\x69\x6d\x65\x2c\x20\x26\x70\x69\x64\x2c\x20\x26\
\x74\x2c\x20\x42\x50\x46\x5f\x41\x4e\x59\x29\x3b\0\x69\x6e\x74\x20\x42\x50\x46\
\x5f\x50\x52\x4f\x47\x28\x65\x6e\x74\x65\x72\x29\x20\x7b\0\x65\x78\x69\x74\x31\
\0\x66\x65\x78\x69\x74\x2f\x64\x6f\x5f\x63\x6f\x72\x65\x64\x75\x6d\x70\0\x20\
\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\x20\x2a\x74\x20\x3d\x20\x62\x70\x66\
\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x65\
\x6e\x74\x65\x72\x5f\x74\x69\x6d\x65\x2c\x20\x26\x70\x69\x64\x29\x3b\0\x20\x20\
\x69\x66\x20\x28\x74\x29\x20\x7b\0\x20\x20\x20\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\
\x6e\x67\x20\x74\x69\x6d\x65\x20\x3d\x20\x62\x70\x66\x5f\x6b\x74\x69\x6d\x65\
\x5f\x67\x65\x74\x5f\x6e\x73\x28\x29\x20\x2d\x20\x2a\x74\x3b\0\x20\x20\x20\x20\
\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\x6e\x64\x5f\x61\x64\
\x64\x28\x26\x74\x69\x6d\x65\x5f\x73\x75\x6d\x2c\x20\x74\x69\x6d\x65\x29\x3b\0\
\x20\x20\x20\x20\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\x6e\
\x64\x5f\x61\x64\x64\x28\x26\x63\x6f\x75\x6e\x74\x2c\x20\x31\x29\x3b\0\x20\x20\
\x20\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x64\x65\x6c\x65\x74\x65\x5f\x65\x6c\
\x65\x6d\x28\x26\x65\x6e\x74\x65\x72\x5f\x74\x69\x6d\x65\x2c\x20\x26\x70\x69\
\x64\x29\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x65\x78\x69\
\x74\x31\x29\x20\x7b\0\x74\x69\x6d\x65\x5f\x73\x75\x6d\0\x6c\x6f\x6e\x67\x20\
\x69\x6e\x74\0\x63\x6f\x75\x6e\x74\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\x73\0\
\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x24\0\0\0\x24\0\0\0\x54\x01\0\0\x78\x01\0\0\0\
\0\0\0\x08\0\0\0\x6e\0\0\0\x01\0\0\0\0\0\0\0\x0f\0\0\0\x60\x01\0\0\x01\0\0\0\0\
\0\0\0\x11\0\0\0\x10\0\0\0\x6e\0\0\0\x07\0\0\0\0\0\0\0\x81\0\0\0\xc1\0\0\0\x11\
\x48\0\0\x08\0\0\0\x81\0\0\0\xc1\0\0\0\x0d\x48\0\0\x10\0\0\0\x81\0\0\0\xe5\0\0\
\0\x0d\x4c\0\0\x18\0\0\0\x81\0\0\0\xe5\0\0\0\x07\x4c\0\0\x28\0\0\0\x81\0\0\0\0\
\0\0\0\0\0\0\0\x40\0\0\0\x81\0\0\0\x0d\x01\0\0\x03\x50\0\0\x60\0\0\0\x81\0\0\0\
\x44\x01\0\0\x05\x44\0\0\x60\x01\0\0\x0d\0\0\0\0\0\0\0\x81\0\0\0\xe5\0\0\0\x0d\
\x68\0\0\x08\0\0\0\x81\0\0\0\xe5\0\0\0\x07\x68\0\0\x18\0\0\0\x81\0\0\0\0\0\0\0\
\0\0\0\0\x20\0\0\0\x81\0\0\0\x72\x01\0\0\x12\x6c\0\0\x40\0\0\0\x81\0\0\0\xab\
\x01\0\0\x07\x70\0\0\x48\0\0\0\x81\0\0\0\xb6\x01\0\0\x16\x74\0\0\x50\0\0\0\x81\
\0\0\0\xb6\x01\0\0\x2b\x74\0\0\x58\0\0\0\x81\0\0\0\xb6\x01\0\0\x29\x74\0\0\x60\
\0\0\0\x81\0\0\0\xe4\x01\0\0\x05\x78\0\0\x80\0\0\0\x81\0\0\0\x0f\x02\0\0\x05\
\x7c\0\0\xa0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\xa8\0\0\0\x81\0\0\0\x34\x02\0\0\
\x05\x80\0\0\xc0\0\0\0\x81\0\0\0\x60\x02\0\0\x05\x64\0\0\0\0\0\x0c\0\0\0\xff\
\xff\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\0\
\0\0\0\0\0\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\x1d\x01\0\0\
\x04\0\x9e\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\0\0\0\x01\0\0\x01\
\x2f\x68\x6f\x6d\x65\x2f\x68\x72\x70\x63\x63\x73\x2f\x77\x6f\x72\x6b\x73\x70\
\x61\x63\x65\x2f\x43\x72\x61\x73\x68\x43\x72\x61\x77\x6c\x65\x72\0\x2e\x2e\x2f\
\x73\x72\x63\0\x2e\x2e\x2f\x73\x72\x63\x2f\x6c\x69\x62\x62\x70\x66\x2f\x75\x73\
\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x62\x70\x66\0\0\x63\x6f\x72\x65\x64\
\x75\x6d\x70\x2f\x6c\x61\x74\x65\x6e\x63\x79\x63\x61\x74\x63\x68\x2e\x62\x70\
\x66\x2e\x63\0\x01\0\0\x76\x6d\x6c\x69\x6e\x75\x78\x2e\x68\0\x02\0\0\x62\x70\
\x66\x5f\x68\x65\x6c\x70\x65\x72\x5f\x64\x65\x66\x73\x2e\x68\0\x03\0\0\0\0\x09\
\x02\0\0\0\0\0\0\0\0\x03\x10\x01\x05\x11\x0a\x13\x05\x0d\x06\x20\x06\x21\x05\
\x07\x06\x20\x03\x6d\x20\x05\x03\x06\x03\x14\x4a\x05\x05\x47\x02\x02\0\x01\x01\
\0\x09\x02\0\0\0\0\0\0\0\0\x03\x18\x01\x05\x0d\x0a\x13\x05\x07\x06\x20\x03\x66\
\x20\x05\x12\x06\x03\x1b\x2e\x05\x07\x4b\x05\x16\x21\x05\x2b\x06\x20\x05\x29\
\x20\x05\x05\x06\x21\x06\x03\x62\x3c\x06\x03\x1f\x20\x05\0\x06\x03\x61\x4a\x05\
\x05\x06\x03\x20\x20\x03\x79\x3c\x02\x02\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe5\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x11\x01\0\0\0\0\x05\0\xc0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0e\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x17\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x50\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\xba\
\0\0\0\x11\0\x08\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x18\x01\0\0\x12\0\x05\0\0\
\0\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\x93\0\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\x22\0\0\0\x11\0\x07\0\x08\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x40\0\0\0\
\0\0\0\0\x01\0\0\0\x0c\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\0\x0c\0\0\0\x60\0\0\0\0\
\0\0\0\x01\0\0\0\x0e\0\0\0\x80\0\0\0\0\0\0\0\x01\0\0\0\x0f\0\0\0\xa8\0\0\0\0\0\
\0\0\x01\0\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x4f\0\0\0\0\0\0\
\0\x02\0\0\0\x02\0\0\0\x83\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\xb7\0\0\0\0\0\0\0\
\x02\0\0\0\x03\0\0\0\xea\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x06\0\0\0\0\0\0\0\
\x03\0\0\0\x06\0\0\0\x0c\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x12\0\0\0\0\0\0\0\
\x03\0\0\0\x08\0\0\0\x16\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x1a\0\0\0\0\0\0\0\
\x03\0\0\0\x08\0\0\0\x26\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x2b\0\0\0\0\0\0\0\
\x03\0\0\0\x08\0\0\0\x37\0\0\0\0\0\0\0\x02\0\0\0\x0e\0\0\0\x40\0\0\0\0\0\0\0\
\x03\0\0\0\x08\0\0\0\x47\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x53\0\0\0\0\0\0\0\
\x02\0\0\0\x0f\0\0\0\x5c\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x63\0\0\0\0\0\0\0\
\x03\0\0\0\x08\0\0\0\x6f\0\0\0\0\0\0\0\x02\0\0\0\x0c\0\0\0\x7c\0\0\0\0\0\0\0\
\x03\0\0\0\x08\0\0\0\x88\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x94\0\0\0\0\0\0\0\
\x03\0\0\0\x08\0\0\0\xa0\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\xbe\0\0\0\0\0\0\0\
\x03\0\0\0\x08\0\0\0\xc5\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\xe8\0\0\0\0\0\0\0\
\x03\0\0\0\x08\0\0\0\x01\x01\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x08\x01\0\0\0\0\0\
\0\x03\0\0\0\x08\0\0\0\x0f\x01\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x1b\x01\0\0\0\0\
\0\0\x03\0\0\0\x08\0\0\0\x4c\x01\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x6c\x01\0\0\0\
\0\0\0\x03\0\0\0\x08\0\0\0\x95\x01\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x9b\x01\0\0\
\0\0\0\0\x03\0\0\0\x08\0\0\0\xa1\x01\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\xa7\x01\0\
\0\0\0\0\0\x03\0\0\0\x08\0\0\0\xae\x01\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\xb5\x01\
\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\xc1\x01\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\xcc\
\x01\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\xd7\x01\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\
\xe8\x01\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\xf6\x01\0\0\0\0\0\0\x03\0\0\0\x08\0\0\
\0\x01\x02\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x10\x02\0\0\0\0\0\0\x03\0\0\0\x07\0\
\0\0\x18\x02\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x21\x02\0\0\0\0\0\0\x03\0\0\0\x05\
\0\0\0\x2c\x02\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x38\x02\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x43\x02\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x4e\x02\0\0\0\0\0\0\x03\0\0\
\0\x08\0\0\0\x5a\x02\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x67\x02\0\0\0\0\0\0\x02\0\
\0\0\x03\0\0\0\x75\x02\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x80\x02\0\0\0\0\0\0\x03\
\0\0\0\x08\0\0\0\x8f\x02\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x97\x02\0\0\0\0\0\0\
\x03\0\0\0\x05\0\0\0\xa0\x02\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\xa9\x02\0\0\0\0\0\
\0\x03\0\0\0\x07\0\0\0\xae\x02\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\
\x02\0\0\0\x02\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x10\0\0\0\0\0\0\0\
\x02\0\0\0\x02\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x30\0\0\0\0\0\0\0\
\x02\0\0\0\x03\0\0\0\x38\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x40\0\0\0\0\0\0\0\
\x02\0\0\0\x03\0\0\0\x48\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x60\0\0\0\0\0\0\0\
\x02\0\0\0\x03\0\0\0\x68\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x70\0\0\0\0\0\0\0\
\x02\0\0\0\x03\0\0\0\x78\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x90\0\0\0\0\0\0\0\
\x02\0\0\0\x02\0\0\0\x98\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\xa0\0\0\0\0\0\0\0\
\x02\0\0\0\x03\0\0\0\xa8\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x90\x01\0\0\0\0\0\0\
\x04\0\0\0\x0e\0\0\0\x9c\x01\0\0\0\0\0\0\x04\0\0\0\x0f\0\0\0\xb4\x01\0\0\0\0\0\
\0\x04\0\0\0\x0c\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x3c\0\0\0\0\0\0\0\
\x04\0\0\0\x03\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x60\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x80\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xa0\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xc8\0\0\0\0\0\0\0\
\x04\0\0\0\x03\0\0\0\xd8\0\0\0\0\0\0\0\x04\0\0\0\x03\0\0\0\xe8\0\0\0\0\0\0\0\
\x04\0\0\0\x03\0\0\0\xf8\0\0\0\0\0\0\0\x04\0\0\0\x03\0\0\0\x08\x01\0\0\0\0\0\0\
\x04\0\0\0\x03\0\0\0\x18\x01\0\0\0\0\0\0\x04\0\0\0\x03\0\0\0\x28\x01\0\0\0\0\0\
\0\x04\0\0\0\x03\0\0\0\x38\x01\0\0\0\0\0\0\x04\0\0\0\x03\0\0\0\x48\x01\0\0\0\0\
\0\0\x04\0\0\0\x03\0\0\0\x58\x01\0\0\0\0\0\0\x04\0\0\0\x03\0\0\0\x68\x01\0\0\0\
\0\0\0\x04\0\0\0\x03\0\0\0\x78\x01\0\0\0\0\0\0\x04\0\0\0\x03\0\0\0\x88\x01\0\0\
\0\0\0\0\x04\0\0\0\x03\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x18\0\0\0\0\
\0\0\0\x02\0\0\0\x02\0\0\0\x2c\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x30\0\0\0\0\0\
\0\0\x02\0\0\0\x03\0\0\0\xab\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\xd8\0\0\0\0\0\0\
\0\x02\0\0\0\x03\0\0\0\x0b\x0d\x0e\x0f\x0c\0\x2e\x64\x65\x62\x75\x67\x5f\x61\
\x62\x62\x72\x65\x76\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\
\x2e\x65\x78\x74\0\x63\x6f\x75\x6e\x74\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\x73\
\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x72\x61\x6e\x67\x65\x73\0\x2e\
\x64\x65\x62\x75\x67\x5f\x73\x74\x72\0\x65\x6e\x74\x65\x72\0\x2e\x72\x65\x6c\
\x66\x65\x6e\x74\x72\x79\x2f\x64\x6f\x5f\x63\x6f\x72\x65\x64\x75\x6d\x70\0\x2e\
\x72\x65\x6c\x66\x65\x78\x69\x74\x2f\x64\x6f\x5f\x63\x6f\x72\x65\x64\x75\x6d\
\x70\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\x74\x69\
\x6d\x65\x5f\x73\x75\x6d\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\
\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\0\x65\x6e\x74\
\x65\x72\x5f\x74\x69\x6d\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\
\x72\x61\x6d\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x6f\x63\0\
\x6c\x61\x74\x65\x6e\x63\x79\x63\x61\x74\x63\x68\x2e\x62\x70\x66\x2e\x63\0\x2e\
\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\
\x42\x54\x46\0\x4c\x42\x42\x31\x5f\x32\0\x65\x78\x69\x74\x31\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x15\x19\0\0\0\0\0\0\x1e\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x5a\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\
\0\0\0\x70\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x56\
\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x12\0\0\0\0\0\0\x10\0\0\0\
\0\0\0\0\x1a\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x71\0\0\0\x01\
\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6d\0\0\0\x09\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x20\x12\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x1a\0\0\0\x05\0\0\
\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x28\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x2d\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x80\x01\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xda\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x01\0\0\0\0\
\0\0\x15\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd6\
\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\x12\0\0\0\0\0\0\x50\0\0\0\
\0\0\0\0\x1a\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x01\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb5\x02\0\0\0\0\0\0\x3e\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xf3\x03\0\0\0\0\0\0\xba\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xb0\x12\0\0\0\0\0\0\x70\x03\0\0\0\0\0\0\x1a\0\0\0\x0c\0\0\0\x08\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x37\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xad\x06\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x33\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x16\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\x1a\0\0\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x45\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6d\x07\0\0\0\0\0\0\
\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x0c\
\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x09\0\0\0\0\0\0\x55\x04\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x01\0\0\x09\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x17\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\
\x1a\0\0\0\x11\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8d\x0d\0\0\0\0\0\0\x98\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x50\x17\0\0\0\0\0\0\x60\x01\0\0\0\0\0\0\x1a\0\0\0\x13\0\0\0\
\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xc9\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x28\x0f\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xc5\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\
\x18\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x1a\0\0\0\x15\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\xae\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\x0f\0\0\0\
\0\0\0\x21\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xaa\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x18\0\0\0\0\0\0\x20\0\
\0\0\0\0\0\0\x1a\0\0\0\x17\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x9c\0\0\0\
\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x10\x19\0\0\0\0\0\0\x05\0\0\
\0\0\0\0\0\x1a\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\x02\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x10\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\
\x01\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct latencycatch_bpf *latencycatch_bpf::open(const struct bpf_object_open_opts *opts) { return latencycatch_bpf__open_opts(opts); }
struct latencycatch_bpf *latencycatch_bpf::open_and_load() { return latencycatch_bpf__open_and_load(); }
int latencycatch_bpf::load(struct latencycatch_bpf *skel) { return latencycatch_bpf__load(skel); }
int latencycatch_bpf::attach(struct latencycatch_bpf *skel) { return latencycatch_bpf__attach(skel); }
void latencycatch_bpf::detach(struct latencycatch_bpf *skel) { latencycatch_bpf__detach(skel); }
void latencycatch_bpf::destroy(struct latencycatch_bpf *skel) { latencycatch_bpf__destroy(skel); }
const void *latencycatch_bpf::elf_bytes(size_t *sz) { return latencycatch_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
latencycatch_bpf__assert(struct latencycatch_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->bss->time_sum) == 8, "unexpected size of 'time_sum'");
	_Static_assert(sizeof(s->bss->count) == 8, "unexpected size of 'count'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __LATENCYCATCH_BPF_SKEL_H__ */
